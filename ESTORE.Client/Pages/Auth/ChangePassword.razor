@page "/account/change-password"

@inject IClientUserService ClientUserService

<PageTitle>Change Password</PageTitle>
<title>Change Password</title>

<MudText Typo="Typo.h6" Class="py-2 px-md-5">Change Password</MudText>

<EditForm Model="ChangedPassword" OnValidSubmit="HandleChangedPasswordSubmit" FormName="ChangedPassword">
    <DataAnnotationsValidator />
    <MudContainer Class="m-0 my-5">
        <MudGrid>
            <MudItem md="6" sm="12" xs="12">
                @if (passwordError != null)
                {
                    <MudPaper Class="my-2 py-2" Style="@($"color:{Colors.BlueGrey.Darken3}; background:{Colors.Grey.Lighten4};")" Elevation="0">
                        <MudText Typo="Typo.subtitle1" Align="Align.Center"><em>@passwordError</em></MudText>
                    </MudPaper>
                }
                <div>
                    <MudTextField @bind-Value="@ChangedPassword.Password"
                                  Label="New Password" Variant="Variant.Outlined"
                                  For="@(()=> ChangedPassword.Password)"
                                  Class="mb-5"
                                  Required="true"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordInputIcon"
                                  OnAdornmentClick="ShowPassword"
                                  AdornmentAriaLabel="Show Password"
                                  InputType="@PasswordInput" />
                </div>
                <div>
                    <MudTextField @bind-Value="@ChangedPassword.ConfirmPassword"
                                  Label="Confirm Password" Variant="Variant.Outlined"
                                  For="@(()=> ChangedPassword.ConfirmPassword)"
                                  Class="mb-5"
                                  Required="true"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@ConfirmPasswordInputIcon"
                                  OnAdornmentClick="ShowConfirmPassword"
                                  AdornmentAriaLabel="Show Confirm Password"
                                  InputType="@ConfirmPasswordInput" />
                </div>

                <div class="d-flex justify-content-end gap-2 mt-3">
                    <MudButton Class="px-10" ButtonType=ButtonType.Submit Variant="Variant.Filled" Color=Color.Primary Disabled="@passwordIsLoading">
                        @if (passwordIsLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudText Typo="Typo.subtitle1">Update Password</MudText>
                        }
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
    </MudContainer>
</EditForm>

@code {
    public ChangePasswordDTO ChangedPassword = new ChangePasswordDTO();
    public bool passwordIsLoading = false;
    public string? passwordError;

    //New Password
    bool isShowPassword = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPassword()
    {
        @if (isShowPassword)
        {
            isShowPassword = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShowPassword = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    //New Current Password
    bool isShowConfirmPassword = false;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowConfirmPassword()
    {
        @if (isShowConfirmPassword)
        {
            isShowConfirmPassword = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            isShowConfirmPassword = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }


    async Task HandleChangedPasswordSubmit()
    {
        passwordIsLoading = true;
        passwordError = null;
        var response = await ClientUserService.ChangeUserPassword(ChangedPassword);
        if (response != null)
        {
            passwordError = response;
        }
        passwordIsLoading = false;
    }
}
