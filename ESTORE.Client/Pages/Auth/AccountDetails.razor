@page "/account"

@inject IClientUserService ClientUserService
@inject IClientFileUploadService ClientFileUploadService

<PageTitle>Account Details</PageTitle>
<title>Account Details</title>

    <MudText Typo="Typo.h6" Class="py-2 px-md-5">Account Details</MudText>

    <EditForm Model="User" OnValidSubmit="HandleSubmit" FormName="UserDetails">
        <DataAnnotationsValidator />
        <MudContainer Class="my-5">
            @if (error != null)
            {
                <MudPaper Class="my-2 py-2" Style="@($"color:{Colors.BlueGrey.Darken3}; background:{Colors.Grey.Lighten4};")" Elevation="0">
                    <MudText Typo="Typo.subtitle1" Align="Align.Center"><em>@error</em></MudText>
                </MudPaper>
            }
            <MudGrid>
                <MudItem xs="12" sm="12" md="6">
                <MudContainer Class="w-100 m-0 p-0" Style="height:290px; border: 1px dashed black">
                    <div class="d-flex justify-content-center row position-relative h-100">
                        <InputFile id="product" OnChange="OnFileSelected" hidden />
                        <div class="d-flex justify-content-center row h-100">
                            <MudButton HtmlTag="label" for="product" FullWidth>
                                <MudContainer Class="h-100 w-100 d-flex justify-center">
                                    @if (!string.IsNullOrEmpty(User.AvatarURL))
                                    {
                                        <MudImage Src="@User.AvatarURL" Style="width: 100%; height: 260px" ObjectFit="ObjectFit.Contain"></MudImage>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Upload" />
                                    }
                                </MudContainer>
                            </MudButton>
                        </div>
                    </div>
                </MudContainer>
                </MudItem>

                <MudItem xs="12" sm="12" md="6">
                    <MudTextField @bind-Value="@User.FullName"
                                  Label="Full Name"
                                  Variant="Variant.Outlined"
                                  Class="mb-4"
                                  Required="true" />
                    <MudTextField @bind-Value="@User.UserName"
                                  Label="Username"
                                  Variant="Variant.Outlined"
                                  Class="mb-4"
                                  Required="true" />
                    <MudTextField @bind-Value="@User.PhoneNumber"
                                  Label="Phone Number"
                                  Variant="Variant.Outlined"
                                  Class="mb-4"
                                  Required="true" />
                    <MudTextField @bind-Value="@User.Email"
                                  Label="Email Address"
                                  Variant="Variant.Outlined"
                                  Class="mb-4"
                                  Required="true" />
                    <div class="d-flex justify-content-end gap-2 mt-3">
                        <MudButton Class="px-10" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color=Color.Primary Disabled="@isLoading">
                            @if (isLoading)
                            {
                                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                            }
                            else
                            {
                                <MudText Typo="Typo.subtitle1">Save</MudText>
                            }
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </EditForm>

@code {
    public UserDetailsDTO User = new UserDetailsDTO();
    public bool isLoading = false;
    public string? error;
    public string? UserAvatar;
    public IBrowserFile? content;
    bool isUserImageChanged = false;

    protected override async Task OnInitializedAsync()
    {
        var response = await ClientUserService.GetUserDetails();
        if (response != null)
        {
            User = response;
            UserAvatar = User.AvatarURL;
        }

    }
    async Task HandleSubmit()
    {
        isLoading = true;
        error = null;
        string response = string.Empty;
        if (string.IsNullOrEmpty(UserAvatar))
        {
            if (isUserImageChanged)
            {
                var uploadResponse = await ClientFileUploadService.UploadUserImage(content);
                if (uploadResponse != null)
                {
                    User.AvatarURL = uploadResponse;
                    UserAvatar = uploadResponse;
                }
            }
            response = await ClientUserService.UpdateUserDetails(User);
        }
        else
        {
            if (isUserImageChanged)
            {
                var uploadResponse = await ClientFileUploadService.EditUserImage(content, User.Id);
                if (uploadResponse != null)
                    User.AvatarURL = uploadResponse;
            }
            response = await ClientUserService.UpdateUserDetails(User);
        }

        if (!string.IsNullOrEmpty(response))
        {
            error = response;
        }
        isLoading = false;

    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 400, 400);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
        User.AvatarURL = imageData;

        isUserImageChanged = true;

        content = e.File;
    }
}
